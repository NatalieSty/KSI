KSI_LSTM.py:42: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  new_data=np.array(new_data)
KSI_LSTM.py:56: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  main_matrix = np.zeros((mybsize, numword), dtype= np.int)
start_training
0
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.41476012098586884
1
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.5091712564007783
2
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.5402027781093224
3
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.5650763296422519
4
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.6018791018895261
5
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.6339092131600919
6
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.6534609198371
7
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.6676895534034818
8
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.6826817876860518
9
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.6949737928996924
10
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7076605748426721
11
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7138887871192502
12
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7184272281587095
13
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.726173684852561
14
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7322291145449359
15
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7348529986940897
16
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7397074761023626
17
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7421944782761505
18
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7487230140099724
19
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7499813600376801
20
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7530579324474702
21
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7539544724455903
22
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7547160196518852
23
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7546538326180415
24
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7604360840201648
25
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7600676045035772
26
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7616681266851864
27
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.760640706501892
28
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7626263746919267
29
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7639047860388791
30
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7641112894068073
31
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7645380782980293
32
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7660044133627587
33
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.763423773351425
34
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7640347818026096
35
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7616085735262738
36
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.76400764200499
37
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7654012636647728
[0.41476012098586884, 0.5091712564007783, 0.5402027781093224, 0.5650763296422519, 0.6018791018895261, 0.6339092131600919, 0.6534609198371, 0.6676895534034818, 0.6826817876860518, 0.6949737928996924, 0.7076605748426721, 0.7138887871192502, 0.7184272281587095, 0.726173684852561, 0.7322291145449359, 0.7348529986940897, 0.7397074761023626, 0.7421944782761505, 0.7487230140099724, 0.7499813600376801, 0.7530579324474702, 0.7539544724455903, 0.7547160196518852, 0.7546538326180415, 0.7604360840201648, 0.7600676045035772, 0.7616681266851864, 0.760640706501892, 0.7626263746919267, 0.7639047860388791, 0.7641112894068073, 0.7645380782980293, 0.7660044133627587, 0.763423773351425, 0.7640347818026096, 0.7616085735262738, 0.76400764200499, 0.7654012636647728] 32
start_training
0
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7861089454341148
1
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7895511848933204
2
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7919408626782353
3
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.792908141975539
4
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7935669760594282
5
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7912186346242523
6
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7876280587209079
7
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7829252939375669
8
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7803963695575598
9
XXXXXXXXXXXXXXXXXXXXXXXXXXXX
validation top- 10 0.7763581432791085
[0.7861089454341148, 0.7895511848933204, 0.7919408626782353, 0.792908141975539, 0.7935669760594282, 0.7912186346242523, 0.7876280587209079, 0.7829252939375669, 0.7803963695575598, 0.7763581432791085] 4
LSTM alone:           
KSI_LSTM.py:292: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  y_pred=(y_scores>0.5).astype(np.int)
top- 10 0.761990497206738
macro AUC 0.8431434429107028
micro AUC 0.9702087938724011
macro F1 0.18798302305369438
micro F1 0.6370940743220622
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
KSI+LSTM:           
KSI_LSTM.py:292: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  y_pred=(y_scores>0.5).astype(np.int)
top- 10 0.7914490722406975
macro AUC 0.8769842694816454
micro AUC 0.9769093268228937
macro F1 0.24861474298957598
micro F1 0.6496693904657407
